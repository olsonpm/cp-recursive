{
  "_args": [
    [
      {
        "raw": "olsonpm/promise-concurrency-pool#aeb841df3f1542a85d1482c89b31e5d1eec75b37",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "olsonpm/promise-concurrency-pool#aeb841df3f1542a85d1482c89b31e5d1eec75b37",
        "spec": "github:olsonpm/promise-concurrency-pool#aeb841df3f1542a85d1482c89b31e5d1eec75b37",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:olsonpm/promise-concurrency-pool.git#aeb841df3f1542a85d1482c89b31e5d1eec75b37",
          "sshUrl": "git+ssh://git@github.com/olsonpm/promise-concurrency-pool.git#aeb841df3f1542a85d1482c89b31e5d1eec75b37",
          "httpsUrl": "git+https://github.com/olsonpm/promise-concurrency-pool.git#aeb841df3f1542a85d1482c89b31e5d1eec75b37",
          "gitUrl": "git://github.com/olsonpm/promise-concurrency-pool.git#aeb841df3f1542a85d1482c89b31e5d1eec75b37",
          "shortcut": "github:olsonpm/promise-concurrency-pool#aeb841df3f1542a85d1482c89b31e5d1eec75b37",
          "directUrl": "https://raw.githubusercontent.com/olsonpm/promise-concurrency-pool/aeb841df3f1542a85d1482c89b31e5d1eec75b37/package.json"
        }
      },
      "/Users/pmo001/git-repos/personal/cp-recursive"
    ]
  ],
  "_from": "git://github.com/olsonpm/promise-concurrency-pool.git#aeb841df3f1542a85d1482c89b31e5d1eec75b37",
  "_id": "promise-concurrency-pool@0.1.0",
  "_inCache": true,
  "_location": "/promise-concurrency-pool",
  "_phantomChildren": {},
  "_requested": {
    "raw": "olsonpm/promise-concurrency-pool#aeb841df3f1542a85d1482c89b31e5d1eec75b37",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "olsonpm/promise-concurrency-pool#aeb841df3f1542a85d1482c89b31e5d1eec75b37",
    "spec": "github:olsonpm/promise-concurrency-pool#aeb841df3f1542a85d1482c89b31e5d1eec75b37",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:olsonpm/promise-concurrency-pool.git#aeb841df3f1542a85d1482c89b31e5d1eec75b37",
      "sshUrl": "git+ssh://git@github.com/olsonpm/promise-concurrency-pool.git#aeb841df3f1542a85d1482c89b31e5d1eec75b37",
      "httpsUrl": "git+https://github.com/olsonpm/promise-concurrency-pool.git#aeb841df3f1542a85d1482c89b31e5d1eec75b37",
      "gitUrl": "git://github.com/olsonpm/promise-concurrency-pool.git#aeb841df3f1542a85d1482c89b31e5d1eec75b37",
      "shortcut": "github:olsonpm/promise-concurrency-pool#aeb841df3f1542a85d1482c89b31e5d1eec75b37",
      "directUrl": "https://raw.githubusercontent.com/olsonpm/promise-concurrency-pool/aeb841df3f1542a85d1482c89b31e5d1eec75b37/package.json"
    }
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "git://github.com/olsonpm/promise-concurrency-pool.git#aeb841df3f1542a85d1482c89b31e5d1eec75b37",
  "_shasum": "91fb0a07ac0f25e9e72689fb44efab8b6c60c7a4",
  "_shrinkwrap": null,
  "_spec": "olsonpm/promise-concurrency-pool#aeb841df3f1542a85d1482c89b31e5d1eec75b37",
  "_where": "/Users/pmo001/git-repos/personal/cp-recursive",
  "author": {
    "name": "phil olson"
  },
  "dependencies": {
    "bluebird": "3.4.6",
    "ramda": "0.22.1"
  },
  "description": "A flexible concurrent pool of promises",
  "devDependencies": {
    "chai": "3.5.0",
    "chai-as-promised": "6.0.0",
    "mocha": "3.1.2",
    "sinon": "1.17.6",
    "sinon-chai": "2.8.0"
  },
  "gitHead": "aeb841df3f1542a85d1482c89b31e5d1eec75b37",
  "license": "ISC",
  "main": "index.js",
  "name": "promise-concurrency-pool",
  "optionalDependencies": {},
  "readme": "# Promise Concurrency Pool\n\n## Why create this module?\n\nI needed the ability to add to a pool from multiple places in my application.\nI didn't feel like hacking my application to fit the api provided\nby es6-promise-pool\n\n## Contrived Example\n\n```js\n\n// some helpers\nconst log = console.log\n  , bPromise = require('bluebird');\n\nconst wait = ms => ({\n  thenLog: msg => ({\n    fn: () => bPromise.delay(ms).then(() => log(msg))\n  })\n});\n\n// now create the pool\nconst myPool = require('promise-concurrency-pool')\n  .create({ size: 2, onSettled: () => log('empty!') });\n\nmyPool.add(wait(15).thenLog('third').fn)\n  .add(wait(5).thenLog('first').fn)\n  .add(wait(2).thenLog('second').fn);\n\n// prints\n//\n// first\n// second\n// third\n// empty!\n```\n\n## API\n\n`require('promise-concurrency-pool')` returns an object with a single\nproperty `create`.\n\n`create(argsObj) -> pool`\n\nwhere `argsObj` is an object with the properties\n\n```\nsize <int>\n *required\n - the size of the pool\n\nonSettled <function>\n - a function to call every time the pool settles (no active promises in\n   the pool)\n```\n\nand `pool` is an object with the properties\n```\nadd(promiseFn) -> pool\n *chainable\n - 'promiseFn' is a 'promise-returning-function'\n - adds promiseFn to a queue.  When a promise in the pool finishes, it grabs one\n   from this queue until empty.\n\nsize <int>\n *readonly\n - the size of the pool\n```\n\n## Test\n\n`npm test`\n",
  "readmeFilename": "README.md",
  "scripts": {
    "test": "node_modules/mocha/bin/mocha test.js"
  },
  "url": "https://github.com/olsonpm/promise-concurrency-pool",
  "version": "0.1.0"
}
